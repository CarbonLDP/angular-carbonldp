{"version":3,"sources":["services/carbon-auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAAiD,eAAe,CAAC,CAAA;AAEjE,IAAY,OAAO,WAAM,WAAW,CAAC,CAAA;AAErC,IAAY,KAAK,WAAM,sBAAsB,CAAC,CAAA;AAI9C,qBAA0C,WAAW,CAAC,CAAA;AAKtD;IAYC,2BAAqC,OAAe;QAZrD,iBAgDC;QAnCC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,IAAI,mBAAY,EAAO,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,IAAI,mBAAY,EAAO,CAAC;QACjD,IAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAY,EAAO,CAAC;QAEnD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAE,UAAE,KAAS,IAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAE,KAAK,CAAE,EAArC,CAAqC,CAAE,CAAC;QACzF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAE,UAAE,KAAS,IAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAE,KAAK,CAAE,EAArC,CAAqC,CAAE,CAAC;IAC3F,CAAC;IAdD,sBAAI,8CAAe;aAAnB,cAA0C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAA,CAAC,CAAC;;;OAAA;;IAExE,sBAAI,+CAAgB;aAApB,cAA2C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAA,CAAC,CAAC;;;OAAA;;IAE1E,sBAAI,iDAAkB;aAAtB,cAA6C,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAA,CAAC,CAAC;;;OAAA;;IAY9E,2CAAe,GAAf;QACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IAC5C,CAAC;IAED,iCAAK,GAAL,UAAO,QAAe,EAAE,QAAe,EAAE,UAAkB;QAA3D,iBASC;QARA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC,IAAI,CAAE,UAAE,WAAuB;YAC1F,EAAE,CAAA,CAAE,UAAW,CAAC;gBAAC,OAAO,CAAC,GAAG,CAAE,kBAAW,EAAE,IAAI,CAAC,SAAS,CAAE;oBAC1D,cAAc,EAAE,WAAW,CAAC,cAAc;oBAC1C,GAAG,EAAE,WAAW,CAAC,GAAG;iBACpB,CAAE,CAAE,CAAC;YACN,KAAI,CAAC,eAAe,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;YAClC,MAAM,CAAC,WAAW,CAAC;QACpB,CAAC,CAAE,CAAC;IACL,CAAC;IAED,kCAAM,GAAN;QACC,OAAO,CAAC,MAAM,CAAE,kBAAW,CAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACxC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACpC,CAAC;IAED,oCAAQ,GAAR,UAAU,IAAW,EAAE,QAAe,EAAE,QAAe;QACtD,IAAI,KAAK,GAAe,KAAK,CAAC,OAAO,CAAC,MAAM,CAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAEzE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;IACnD,CAAC;IAhDF;QAAC,iBAAU,EAAE;mBAaE,aAAM,CAAE,mBAAY,CAAE;;yBAbxB;IAiDb,wBAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,yBAAiB,oBAgD7B,CAAA","file":"services/carbon-auth.service.js","sourcesContent":["import { Injectable, Inject, EventEmitter } from \"@angular/core\";\n\nimport * as Cookies from \"js-cookie\";\n\nimport * as Agent from \"carbonldp/Auth/Agent\";\nimport Context from \"carbonldp/Context\";\nimport * as Token from \"carbonldp/Auth/Token\";\n\nimport { AUTH_COOKIE, ContextToken } from \"./../boot\";\n\nimport * as AuthService from \"./auth.service\";\n\n@Injectable()\nexport class CarbonAuthService implements AuthService.Class {\n\tprivate _loggedInEmitter:EventEmitter<any>;\n\tprivate _loggedOutEmitter:EventEmitter<any>;\n\tprivate _authChangedEmitter:EventEmitter<any>;\n\tprivate context:Context;\n\n\tget loggedInEmitter():EventEmitter<any> { return this._loggedInEmitter };\n\n\tget loggedOutEmitter():EventEmitter<any> { return this._loggedOutEmitter };\n\n\tget authChangedEmitter():EventEmitter<any> { return this._authChangedEmitter };\n\n\tconstructor( @Inject( ContextToken ) context:Context ) {\n\t\tthis.context = context;\n\t\tthis._loggedInEmitter = new EventEmitter<any>();\n\t\tthis._loggedOutEmitter = new EventEmitter<any>();\n\t\tthis._authChangedEmitter = new EventEmitter<any>();\n\n\t\tthis.loggedInEmitter.subscribe( ( value:any ) => this.authChangedEmitter.emit( value ) );\n\t\tthis.loggedOutEmitter.subscribe( ( value:any ) => this.authChangedEmitter.emit( value ) );\n\t}\n\n\tisAuthenticated():boolean {\n\t\treturn this.context.auth.isAuthenticated();\n\t}\n\n\tlogin( username:string, password:string, rememberMe:boolean ):Promise<any> {\n\t\treturn this.context.auth.authenticate( username, password ).then( ( credentials:Token.Class ) => {\n\t\t\tif( rememberMe ) Cookies.set( AUTH_COOKIE, JSON.stringify( {\n\t\t\t\texpirationTime: credentials.expirationTime,\n\t\t\t\tkey: credentials.key\n\t\t\t} ) );\n\t\t\tthis.loggedInEmitter.emit( null );\n\t\t\treturn credentials;\n\t\t} );\n\t}\n\n\tlogout():void {\n\t\tCookies.remove( AUTH_COOKIE );\n\t\tthis.context.auth.clearAuthentication();\n\t\tthis.loggedOutEmitter.emit( null );\n\t}\n\n\tregister( name:string, username:string, password:string ):Promise<any> {\n\t\tlet agent:Agent.Class = Agent.Factory.create( name, username, password );\n\n\t\treturn this.context.auth.agents.register( agent );\n\t}\n}\n"],"sourceRoot":"/source/"}