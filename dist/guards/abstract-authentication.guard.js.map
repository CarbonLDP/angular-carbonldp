{"version":3,"sources":["guards/abstract-authentication.guard.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAAiF,iBAAiB,CAAC,CAAA;AAEnG,qBAAsC,WAAW,CAAC,CAAA;AAClD,yBAA4B,eAAe,CAAC,CAAA;AAG5C;IAGC,qCAAuB,MAAa;QAAb,WAAM,GAAN,MAAM,CAAO;IAAI,CAAC;IAEzC,iDAAW,GAAX,UAAa,KAA4B,EAAE,KAAyB;QAApE,iBAYC;QAXA,MAAM,CAAC,oBAAa,CAAC,OAAO,CAAC,IAAI,CAAE;YAClC,oGAAoG;YACpG,0GAA0G;YAC1G,MAAM,CAAC,aAAM,CAAE,sBAAW,CAAC,KAAK,CAAE,CAAC;QACpC,CAAC,CAAE,CAAC,IAAI,CAAE,UAAE,WAA6B;YACxC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAE/B,MAAM,CAAC,IAAI,CAAC;QACb,CAAC,CAAE,CAAC,KAAK,CAAE,UAAE,KAAK;YACjB,MAAM,CAAC,KAAI,CAAC,OAAO,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;QACrC,CAAC,CAAE,CAAC;IACL,CAAC;IAES,8CAAQ,GAAlB,UAAoB,KAA4B,EAAE,KAAyB;QAC1E,EAAE,CAAA,CAAE,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,CAAE,UAAU,CAAE,KAAK,WAAY,CAAC,CAAC,CAAC;YAC/G,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAC,IAAI,CAAE,UAAU,CAAE,CAAE,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,OAAO,CAAC,KAAK,CAAE,6EAA6E,CAAE,CAAC;QAChG,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAES,6CAAO,GAAjB,UAAmB,KAA4B,EAAE,KAAyB;QACzE,EAAE,CAAA,CAAE,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,CAAE,SAAS,CAAE,KAAK,WAAY,CAAC,CAAC,CAAC;YAC9G,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAC,IAAI,CAAE,SAAS,CAAE,CAAE,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;QACtC,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IApCF;QAAC,iBAAU,EAAE;;mCAAA;IAqCb,kCAAC;AAAD,CApCA,AAoCC,IAAA;AApCqB,mCAA2B,8BAoChD,CAAA","file":"guards/abstract-authentication.guard.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from \"@angular/router\";\n\nimport { inject, activeContext } from \"./../boot\";\nimport { AuthService } from \"./../services\";\n\n@Injectable()\nexport abstract class AbstractAuthenticationGuard implements CanActivate {\n\tprotected authService:AuthService.Class;\n\n\tconstructor( protected router:Router ) {}\n\n\tcanActivate( route:ActivatedRouteSnapshot, state:RouterStateSnapshot ):Promise<boolean> {\n\t\treturn activeContext.promise.then( () => {\n\t\t\t// AuthService needs to be injected here so we don't cause a premature initialization of AuthService\n\t\t\t// If AuthService is injected in the constructor, the activeContext won't be ready and will cause an error\n\t\t\treturn inject( AuthService.Token );\n\t\t} ).then( ( authService:AuthService.Class ) => {\n\t\t\tthis.authService = authService;\n\n\t\t\treturn true;\n\t\t} ).catch( ( error ) => {\n\t\t\treturn this.onError( route, state );\n\t\t} );\n\t}\n\n\tprotected onReject( route:ActivatedRouteSnapshot, state:RouterStateSnapshot ):boolean {\n\t\tif( typeof route.data === \"object\" && route.data !== null && typeof route.data[ \"onReject\" ] !== \"undefined\" ) {\n\t\t\tthis.router.navigate( route.data[ \"onReject\" ] );\n\t\t} else {\n\t\t\tconsole.error( \"AuthenticatedGuard was configured in a route without an 'onReject' property\" );\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected onError( route:ActivatedRouteSnapshot, state:RouterStateSnapshot ):boolean {\n\t\tif( typeof route.data === \"object\" && route.data !== null && typeof route.data[ \"onError\" ] !== \"undefined\" ) {\n\t\t\tthis.router.navigate( route.data[ \"onError\" ] );\n\t\t} else {\n\t\t\treturn this.onReject( route, state );\n\t\t}\n\t\treturn false;\n\t}\n}\n"],"sourceRoot":"/source/"}